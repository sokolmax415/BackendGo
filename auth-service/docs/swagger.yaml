basePath: /smartbuilding/v1
definitions:
  request.ChangeRoleRequest:
    properties:
      role:
        type: string
    type: object
  request.LoginRequest:
    properties:
      login:
        example: ivanov@228
        type: string
      password:
        example: "12345"
        type: string
    type: object
  request.NameRequest:
    properties:
      firstname:
        type: string
      lastname:
        type: string
    type: object
  request.RefreshRequest:
    properties:
      refreshToken:
        example: fhdifhdigfiwdfeiduw636y$@&.sgdy
        type: string
    type: object
  request.RegisterRequest:
    properties:
      firstname:
        example: Ivan
        type: string
      lastname:
        example: Ivanov
        type: string
      login:
        type: string
      password:
        example: "12345"
        type: string
    type: object
  request.UserRequest:
    properties:
      firstname:
        type: string
      lastname:
        type: string
      login:
        type: string
      password:
        type: string
    type: object
  response.ErrorResponse:
    properties:
      message:
        type: string
      status:
        type: string
    type: object
  response.LoginResponse:
    properties:
      accessToken:
        type: string
      expires_in:
        type: integer
      refreshToken:
        type: string
    type: object
  response.RefreshResponse:
    properties:
      accessToken:
        type: string
      expires_in:
        type: integer
    type: object
  response.SuccessResponse:
    properties:
      message:
        type: string
      status:
        type: string
    type: object
  response.UserResponse:
    properties:
      firstname:
        type: string
      lastname:
        type: string
      login:
        type: string
      registration_time:
        type: string
      role:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: Это документация для сервиса аутентификации
  title: Auth API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Вход пользователя в систему
      parameters:
      - description: Данные для входа
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Успешный вход
          schema:
            $ref: '#/definitions/response.LoginResponse'
        "400":
          description: Неверный формат запроса
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Неверные учетные данные
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "422":
          description: Ошибка валидации данных
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Аутентификация пользователя
      tags:
      - auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Обновляет access token используя refresh token
      parameters:
      - description: Refresh token
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.RefreshRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Успешное обновление токена
          schema:
            $ref: '#/definitions/response.RefreshResponse'
        "400":
          description: Неверный формат запроса
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Невалидный refresh token
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Обновление токена
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Создает нового пользователя в системе
      parameters:
      - description: Данные для регистрации
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Успешная регистрация
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Неверный формат запроса
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "409":
          description: Пользователь уже существует
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "422":
          description: Ошибка валидации данных
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Регистрация пользователя
      tags:
      - auth
  /users:
    get:
      description: Возвращает список всех зарегистрированных пользователей
      produces:
      - application/json
      responses:
        "200":
          description: Список пользователей
          schema:
            items:
              $ref: '#/definitions/response.UserResponse'
            type: array
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Получение списка всех пользователей
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Создает нового пользователя с ролью по умолчанию
      parameters:
      - description: Данные нового пользователя
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.UserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Пользователь успешно создан
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Неверный формат запроса
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "409":
          description: Пользователь уже существует
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "422":
          description: Ошибка валидации данных
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Создание нового пользователя
      tags:
      - users
  /users/{login}:
    delete:
      description: Удаляет пользователя по логину
      parameters:
      - description: Логин пользователя
        in: path
        name: login
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Пользователь успешно удален
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "404":
          description: Пользователь не найден
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Удаление пользователя
      tags:
      - users
    get:
      description: Возвращает информацию по логину пользователя
      parameters:
      - description: Логин пользователя
        in: path
        name: login
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Информация о пользователе
          schema:
            $ref: '#/definitions/response.UserResponse'
        "404":
          description: Пользователь не найден
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Получение информации о пользователе
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Меняет роль пользователя по логину
      parameters:
      - description: Логин пользователя
        in: path
        name: login
        required: true
        type: string
      - description: Новая роль
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.ChangeRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Роль успешно изменена
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Неверный формат запроса
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Пользователь или роль не найдены
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Изменение роли пользователя
      tags:
      - users
  /users/name/{login}:
    put:
      consumes:
      - application/json
      description: Обновляет имя и фамилию по логину
      parameters:
      - description: Логин пользователя
        in: path
        name: login
        required: true
        type: string
      - description: Новое имя и фамилия
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.NameRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Имя и фамилия успешно обновлены
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Неверный формат запроса
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Пользователь не найден
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "422":
          description: Ошибка валидации данных
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Изменение имени и фамилии пользователя
      tags:
      - users
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
